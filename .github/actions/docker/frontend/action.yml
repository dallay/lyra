name: Package and Publish Frontend ðŸ“¦
description: |
  This composite action packages and publishes the frontend application
  (lyra-app and lyra-landing-page) to the container registry. It also performs vulnerability scanning.

inputs:
  is_production:
    description: 'Indicates if the frontend should be delivered to production'
    required: true
    default: 'true'
  docker_username:
    description: 'The username for Docker Hub'
    required: true
  docker_password:
    description: 'The password for Docker Hub'
    required: true
  version:
    description: 'The version of the frontend (for production builds)'
    required: false
  ci_github_token:
    description: 'GITHUB_TOKEN with permissions to push to the container registry'
    required: true
  target:
    description: 'The target image to build (lyra-app, lyra-landing-page)'
    required: true
  non_prod_tag:
    description: 'Docker image tag for non-production builds'
    required: false
    default: 'nightly'
  tiptap_pro_token:
    description: 'The token to access the Tiptap Pro registry'
    required: true

runs:
  using: composite
  steps:
    - name: Validate Target Input
      run: |
        if [[ "${{ inputs.target }}" != "lyra-app" && "${{ inputs.target }}" != "lyra-landing-page" ]]; then
          echo "Invalid target specified: '${{ inputs.target }}'."
          exit 1
        fi

      shell: bash

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.docker_username }}
        password: ${{ inputs.docker_password }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.ci_github_token }}

    - name: Cache Docker Layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ inputs.target }}-${{ inputs.prod_tag }}
        restore-keys: |
          ${{ runner.os }}-buildx-${{ inputs.target }}-

    - name: Build and Push Docker Images
      uses: docker/build-push-action@v5
      with:
        platforms: linux/amd64,linux/arm64
        target: ${{ inputs.target }}
        push: true
        build-args: |
          TIPTAP_PRO_TOKEN=${{ inputs.tiptap_pro_token }}
        tags: |
          ${{ outputs.repo_name }}:${{ outputs.prod_tag }},
          ${{ outputs.repo_name }}:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

    - name: ðŸª„ Scan Docker Images for Vulnerabilities
      uses: aquasecurity/trivy-action@0.20.0
      with:
        image-ref: ${{ outputs.repo_name }}:${{ outputs.prod_tag }}
        format: sarif
        output: trivy-${{ inputs.target }}-report-${{ outputs.prod_tag }}.sarif
        severity: HIGH,CRITICAL
        ignore-unfixed: true
        cache-dir: /tmp/trivy-cache-${{ inputs.target }}

    - name: â‡ª Upload Trivy Scan Report
      uses: actions/upload-artifact@v3
      with:
        name: trivy-${{ inputs.target }}-report-${{ outputs.prod_tag }}
        path: trivy-${{ inputs.target }}-report-${{ outputs.prod_tag }}.sarif
        retention-days: 7

    - name: Push Image to GHCR
      shell: bash
      run: |
        docker buildx imagetools create \
          --tag ${{ outputs.ghcr_repo }}:${{ outputs.prod_tag }} \
          --tag ${{ outputs.ghcr_repo }}:latest \
        ${{ outputs.repo_name }}:latest
