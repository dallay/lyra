package com.lyra.app.newsletter.infrastructure.persistence.entity

import com.lyra.app.newsletter.domain.SubscriberStatus
import java.time.LocalDateTime
import java.util.*
import org.springframework.data.annotation.Id
import org.springframework.data.annotation.ReadOnlyProperty
import org.springframework.data.domain.Persistable
import org.springframework.data.relational.core.mapping.Column
import org.springframework.data.relational.core.mapping.Table

@Table("subscribers")
data class SubscriberEntity(
    // id is generated by the frontend and sent to the backend as a UUID
    @Id
    @JvmField
    val id: UUID,
    var email: String,
    var firstname: String,
    var lastname: String? = null,
    @Column("status")
    var status: SubscriberStatus,
    override var createdAt: LocalDateTime = LocalDateTime.now(),
    override var updatedAt: LocalDateTime? = LocalDateTime.now(),
    @ReadOnlyProperty
    internal var isNewEntity: Boolean = false
) : AuditableEntity(), Persistable<UUID> {

    /**
     * Returns the id of the entity.
     *
     * @return the id. Can be null.
     */
    override fun getId(): UUID = id

    /**
     * Returns if the `Persistable` is new or was persisted already.
     *
     * @return if true the object is new.
     */
    override fun isNew(): Boolean = isNewEntity

    companion object {
        fun create(
            id: UUID,
            email: String,
            firstname: String,
            lastname: String,
            status: SubscriberStatus
        ): SubscriberEntity {
            val entity = SubscriberEntity(
                id = id,
                email = email,
                firstname = firstname,
                lastname = lastname,
                status = status,
            )
            entity.isNewEntity = true
            return entity
        }
    }
}
