name: Package and Publish ðŸ“¦
description: |
  This workflow is responsible for packaging and publishing the application
  to the container registry.

  It also performs vulnerability scanning on the OCI image.

  The workflow is triggered after the build stage.

  The workflow is responsible for the following:
  - Install Java Tools & Dependencies
  - Execute Gradle build
  - OCI image vulnerability scanning
  - Upload vulnerability report
  - Log in to Docker Hub

inputs:
  deliver:
    description: 'Deliver application to production'
    required: true
    default: 'true'
  registry:
    description: 'The container registry to push the image to'
    required: true
    default: 'ghcr.io'
  docker_username:
    description: 'The username for Docker Hub'
    required: true
  docker_password:
    description: 'The password for Docker Hub'
    required: true
  image_name:
    description: 'The name of the image to be published'
    required: true
  version:
    description: 'The version of the application'
    required: true
  ci_github_token:
    description: 'GITHUB_TOKEN with permissions to push to the container registry'
    required: true
  owner:
    description: 'The owner of the repository'
    required: true
  app_repo:
    description: 'The name of the application repository'
    required: true
  gradle-encryption-key:
    description: 'The encryption key to use for the gradle cache'
    required: true
  deploy_repo:
    description: 'The name of the repository to deploy the application to'
    required: true
  docker_hub_image:
    description: 'Docker hub image name'
    required: false
    default: 'n4t5u/lyra'
  non_prod_tag:
    description: 'Non production docker image tag'
    required: false
    default: 'nightly'


runs:
  using: composite
  steps:
    - name: Install Java Tools & Dependencies
      uses: ./.github/actions/install/java
      with:
        java-version: 21
        gradle-encription-key: ${{ inputs.gradle-encryption-key }}

    - name: Execute Gradle build
      run: |
        chmod +x gradlew
        ./gradlew assemble
        ./gradlew bootBuildImage --imageName ${{ inputs.registry }}/${{ inputs.image_name }}:${{ inputs.version }}
      shell: bash

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image for lyra-app
      uses: docker/build-push-action@v6
      with:
        context: .
        target: lyra-app
        github-token: ${{ inputs.ci_github_token }}
        cache-from: type=registry,ref=${{ inputs.registry }}/${{ inputs.image_name }}-app:cache
        cache-to: type=inline
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ inputs.registry }}/${{ inputs.image_name }}-app:${{ inputs.version }}
          ${{ inputs.registry }}/${{ inputs.image_name }}-app:latest
        secrets: |
          GIT_AUTH_TOKEN=${{ inputs.ci_github_token }}

    - name: Build and push Docker image for lyra-landing-page
      uses: docker/build-push-action@v6
      with:
        context: .
        target: lyra-landing-page
        github-token: ${{ inputs.ci_github_token }}
        cache-from: type=registry,ref=${{ inputs.registry }}/${{ inputs.image_name }}-landing-page:cache
        cache-to: type=inline
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ inputs.registry }}/${{ inputs.image_name }}-landing-page:${{ inputs.version }}
          ${{ inputs.registry }}/${{ inputs.image_name }}-landing-page:latest
        secrets: |
          GIT_AUTH_TOKEN=${{ inputs.ci_github_token }}

    - name: Publish to GHCR ðŸ“¦
      uses: ./.github/actions/docker/ghcr
      with:
        deliver: ${{ inputs.deliver }}
        image_name: ${{ inputs.image_name }}
        version: ${{ inputs.version }}
        ci_github_token: ${{ inputs.ci_github_token }}
        owner: ${{ inputs.owner }}
        app_repo: ${{ inputs.app_repo }}
        deploy_repo: ${{ inputs.deploy_repo }}
        non_prod_tag: ${{ inputs.non_prod_tag }}

    - name: Publish to Docker Hub ðŸ“¦
      uses: ./.github/actions/docker/dockerhub
      with:
        deliver: ${{ inputs.deliver }}
        docker_username: ${{ inputs.docker_username }}
        docker_password: ${{ inputs.docker_password }}
        image_name: ${{ inputs.image_name }}
        version: ${{ inputs.version }}
        docker_hub_image: ${{ inputs.docker_hub_image }}
        non_prod_tag: ${{ inputs.non_prod_tag }}
