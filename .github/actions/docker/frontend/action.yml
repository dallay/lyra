name: Package and Publish Frontend ðŸ“¦
description: |
  This composite action packages and publishes the frontend application
  (lyra-app and lyra-landing-page) to the container registry. It also performs vulnerability scanning.

inputs:
  deliver:
    description: 'Deliver frontend to production'
    required: true
    default: 'true'
  docker_username:
    description: 'The username for Docker Hub'
    required: true
  docker_password:
    description: 'The password for Docker Hub'
    required: true
  version:
    description: 'The version of the frontend'
    required: true
  ci_github_token:
    description: 'GITHUB_TOKEN with permissions to push to the container registry'
    required: true
  target:
    description: 'The target image to build (lyra-app, lyra-landing-page)'
    required: true
  non_prod_tag:
    description: 'Non production docker image tag'
    required: false
    default: 'nightly'
  tiptap-pro-token:
    description: 'The token to access the Tiptap Pro registry'
    required: true

runs:
  using: composite
  steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.docker_username }}
        password: ${{ inputs.docker_password }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.ci_github_token }}

    - name: Cache Docker layers
      id: cache
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    # Build and push production images
    - name: Build and Push Docker images (Production)
      if: ${{ inputs.deliver == 'true' }}
      uses: docker/build-push-action@v5
      with:
        platforms: linux/amd64,linux/arm64
        target: ${{ inputs.target }}
        push: true
        tags: |
          n4t5u/${{ inputs.target }}:${{ inputs.version }},
          n4t5u/${{ inputs.target }}:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
        build-args: |
          TIPTAP_PRO_TOKEN=${{ inputs.tiptap-pro-token }}

    # Scan production image
    - name: ðŸª„ Scan Docker images for vulnerabilities (Production)
      if: ${{ inputs.deliver == 'true' }}
      uses: aquasecurity/trivy-action@0.20.0
      with:
        image-ref: n4t5u/${{ inputs.target }}:${{ inputs.version }}
        format: sarif
        output: trivy-${{ inputs.target }}-report.sarif
        severity: HIGH,CRITICAL
        ignore-unfixed: true
        cache-dir: /tmp/trivy-cache-${{ inputs.target }}

    - name: â‡ª Upload Trivy Scan Report (Production)
      if: ${{ inputs.deliver == 'true' }}
      uses: actions/upload-artifact@v3
      with:
        name: trivy-${{ inputs.target }}-report
        path: trivy-${{ inputs.target }}-report.sarif

    - name: Push image to GHCR with latest tag (Production)
      if: ${{ inputs.deliver == 'true' }}
      run: |
        docker buildx imagetools create \
          --tag ghcr.io/dallay/${{ inputs.target }}:${{ inputs.version }} \
          --tag ghcr.io/dallay/${{ inputs.target }}:latest \
          --build-arg TIPTAP_PRO_TOKEN=${{ inputs.tiptap-pro-token }} \
        n4t5u/${{ inputs.target }}:latest
      shell: bash

    # Build and push non-production images
    - name: Build and Push Docker images (Non-Production)
      if: ${{ inputs.deliver == 'false' }}
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        target: ${{ inputs.target }}
        push: true
        tags: |
          n4t5u/${{ inputs.target }}:${{ inputs.non_prod_tag }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
        build-args: |
          TIPTAP_PRO_TOKEN=${{ inputs.tiptap-pro-token }}

    # Scan non-production image
    - name: ðŸª„ Scan Docker images for vulnerabilities (Non-Production)
      if: ${{ inputs.deliver == 'false' }}
      uses: aquasecurity/trivy-action@0.20.0
      with:
        image-ref: n4t5u/${{ inputs.target }}:${{ inputs.non_prod_tag }}
        format: sarif
        output: trivy-${{ inputs.target }}-report-${{ inputs.non_prod_tag }}.sarif
        severity: HIGH,CRITICAL
        ignore-unfixed: true
        cache-dir: /tmp/trivy-cache-${{ inputs.target }}-${{ inputs.non_prod_tag }}

    - name: â‡ª Upload Trivy Scan Report (Non-Production)
      if: ${{ inputs.deliver == 'false' }}
      uses: actions/upload-artifact@v3
      with:
        name: trivy-${{ inputs.target }}-report-${{ inputs.non_prod_tag }}
        path: trivy-${{ inputs.target }}-report-${{ inputs.non_prod_tag }}.sarif

    - name: Push image to GHCR with latest tag (Non-Production)
      if: ${{ inputs.deliver == 'false' }}
      run: |
          docker buildx imagetools create \
          --tag ghcr.io/dallay/${{ inputs.target }}:${{ inputs.non_prod_tag }} \
          --build-arg TIPTAP_PRO_TOKEN=${{ inputs.tiptap-pro-token }} \
          n4t5u/${{ inputs.target }}:${{ inputs.non_prod_tag }}
      shell: bash
